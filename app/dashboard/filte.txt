// src/app/page.tsx
'use client'; // Required for hooks like useState, useEffect, useRouter

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams, usePathname } from 'next/navigation'; // Use next/navigation for App Router

// --- Constants ---
const API_URL = 'https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json';
const SUGGESTION_LIMIT = 3;

// --- Type Definition (Optional but Recommended with TypeScript) ---
interface Doctor {
    id: string; // Use 'id' from the API
    name: string; // Use 'name' from the API
    specialities: { name: string }[]; // Array of objects with a 'name' property
    experience: string; // Experience is a string like "13 Years of experience"
    fees: string; // Fees is a string like "₹ 500"
    video_consult: boolean;
    in_clinic: boolean;
    // Add other fields from the JSON if needed, e.g., photo, clinic, etc.
    // doctor_id?: string; // Keep original fields optional or remove if not used
    // doctor_name?: string;
    // years_of_experience?: number;
    // mode_of_consultation?: 'Video Consult' | 'In Clinic';
    // consultation_fee?: number;
}

// --- Helper Function ---
const getArrayFromQueryParam = (param: string | null): string[] => {
    return param ? param.split(',') : [];
};

export default function DoctorListingPage() {
    const router = useRouter();
    const pathname = usePathname(); // Get the current path
    const searchParams = useSearchParams(); // Hook to read search params

    const [allDoctors, setAllDoctors] = useState<Doctor[]>([]);
    const [filteredDoctors, setFilteredDoctors] = useState<Doctor[]>([]);
    const [specialties, setSpecialties] = useState<string[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    // --- Search & Autocomplete State ---
    const [searchTerm, setSearchTerm] = useState<string>('');
    const [suggestions, setSuggestions] = useState<Doctor[]>([]);
    const [isSuggestionBoxVisible, setIsSuggestionBoxVisible] = useState<boolean>(false);

    // --- Filter State ---
    // Initialize state FROM searchParams on initial render
    const [selectedConsultationType, setSelectedConsultationType] = useState<string>('');
    const [selectedSpecialties, setSelectedSpecialties] = useState<string[]>([]);
    const [selectedSort, setSelectedSort] = useState<string>('');

    // --- Fetch Initial Data & Restore State from URL ---
    useEffect(() => {
        const fetchDoctors = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(API_URL);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data: Doctor[] = await response.json();
                setAllDoctors(data || []);

                // Extract unique specialties, ensuring they are strings
                const uniqueSpecialties = [
                    ...new Set(
                        data
                            // Use the new structure: array of objects with 'name'
                            .flatMap(doc => doc.specialities?.map(spec => spec.name) || []) // Get all specialties, handle missing/null arrays
                            .filter((spec): spec is string => typeof spec === 'string' && spec.trim() !== '') // Type guard for filtering
                    ),
                ].sort(); // Sort alphabetically
                setSpecialties(uniqueSpecialties);

                // Restore state from URL *after* data and specialties are loaded
                const initialSearch = searchParams.get('search') || '';
                const initialConsultation = searchParams.get('consultation') || '';
                // Ensure restored specialties actually exist in the fetched list
                const validInitialSpecialties = getArrayFromQueryParam(searchParams.get('specialties'))
                                                  .filter(spec => uniqueSpecialties.includes(spec));
                const initialSort = searchParams.get('sort') || '';

                setSearchTerm(initialSearch);
                setSelectedConsultationType(initialConsultation);
                setSelectedSpecialties(validInitialSpecialties); // Use validated list
                setSelectedSort(initialSort);

            } catch (e: any) {
                console.error("Failed to fetch doctors:", e);
                setError('Failed to load doctor data. Please try again later.');
                setAllDoctors([]);
                setSpecialties([]);
            } finally {
                setLoading(false);
            }
        };
        fetchDoctors();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // Fetch only once on mount

    // --- Update URL Query Params ---
    // This effect runs when filter/search states change
    useEffect(() => {
        // Prevent updating URL during initial load/state restoration
        if (loading) return;

        const current = new URLSearchParams(Array.from(searchParams.entries())); // Get current params

        // Update params based on state
        if (searchTerm) current.set('search', searchTerm); else current.delete('search');
        if (selectedConsultationType) current.set('consultation', selectedConsultationType); else current.delete('consultation');
        if (selectedSpecialties.length > 0) current.set('specialties', selectedSpecialties.join(',')); else current.delete('specialties');
        if (selectedSort) current.set('sort', selectedSort); else current.delete('sort');

        // Create the new search query string
        const search = current.toString();
        const query = search ? `?${search}` : "";

        // Construct the full new URL path with query
        const newUrl = `${pathname}${query}`;
        // Construct the full current URL path with query for comparison
        const currentQueryString = searchParams.toString();
        const currentUrl = `${pathname}${currentQueryString ? '?' + currentQueryString : ''}`;


        // Update URL only if it has actually changed
        if (newUrl !== currentUrl) {
             // Use router.push for App Router to update URL without full reload
             router.push(newUrl, { scroll: false }); // scroll: false prevents jumping to top
        }

    // Only include state variables that trigger URL updates
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [searchTerm, selectedConsultationType, selectedSpecialties, selectedSort]); // Removed pathname, router, searchParams, loading


    // --- Autocomplete Logic ---
    useEffect(() => {
        if (searchTerm.trim() === '') {
            setSuggestions([]);
            setIsSuggestionBoxVisible(false);
            return;
        }
        // Only filter if allDoctors has data
        if (allDoctors.length > 0) {
            const matchingDoctors = allDoctors
                .filter(doctor =>
                    // Use 'name' instead of 'doctor_name'
                    doctor.name.toLowerCase().includes(searchTerm.toLowerCase())
                )
                .slice(0, SUGGESTION_LIMIT);

            setSuggestions(matchingDoctors);
            setIsSuggestionBoxVisible(matchingDoctors.length > 0);
        } else {
             setSuggestions([]); // Ensure suggestions are cleared if doctors haven't loaded
             setIsSuggestionBoxVisible(false);
        }
    }, [searchTerm, allDoctors]);

    // --- Filtering and Sorting Logic ---
    useEffect(() => {
        // Ensure filtering only happens after initial load and state restoration
        if (loading) return;

        let doctors = [...allDoctors];

        // Use the state variables directly as they are the source of truth after initial load
        // The URL update effect ensures state and URL are synchronized

        // 1. Search Filter
        if (searchTerm) {
            doctors = doctors.filter(doc =>
                // Use 'name' instead of 'doctor_name'
                doc.name.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        // 2. Consultation Type Filter
        if (selectedConsultationType) {
            doctors = doctors.filter(doc =>
                // Use boolean flags 'video_consult' and 'in_clinic'
                (selectedConsultationType === 'Video Consult' && doc.video_consult) ||
                (selectedConsultationType === 'In Clinic' && doc.in_clinic)
            );
        }

        // 3. Specialties Filter
        if (selectedSpecialties.length > 0) {
            doctors = doctors.filter(doc =>
                selectedSpecialties.every(specFilter =>
                    // Check if any specialty object in the array has a matching name
                    doc.specialities?.some(s => s.name === specFilter) // Add optional chaining for safety
                )
            );
        }

        // 4. Sorting
        if (selectedSort === 'fees') {
            // Parse the numeric value from the 'fees' string (e.g., "₹ 500")
            doctors.sort((a, b) => {
                const feeA = parseInt(a.fees?.replace(/\D/g, '') || '0'); // Handle potential null/undefined fees
                const feeB = parseInt(b.fees?.replace(/\D/g, '') || '0');
                return feeA - feeB;
            });
        } else if (selectedSort === 'experience') {
            // Parse the numeric value from the 'experience' string (e.g., "13 Years of experience")
             doctors.sort((a, b) => {
                const expA = parseInt(a.experience?.match(/\d+/)?.[0] || '0'); // Extract first number, default 0
                const expB = parseInt(b.experience?.match(/\d+/)?.[0] || '0');
                return expB - expA; // Sort descending (High to Low)
            });
        }

        setFilteredDoctors(doctors);
    // Depend on the state variables that control filtering/sorting and the base data
    }, [searchTerm, selectedConsultationType, selectedSpecialties, selectedSort, allDoctors, loading]);


    // --- Event Handlers ---
    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(event.target.value);
    };

    const handleSuggestionClick = (doctorName: string) => {
        // Use 'name'
        setSearchTerm(doctorName); // Apply the search term
        setSuggestions([]); // Hide suggestions
        setIsSuggestionBoxVisible(false);
    };

    // Close suggestions if clicked outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as Element; // Cast target to Element
            // Check if the click is outside the autocomplete input and suggestions container
            if (
                target.closest('[data-testid="autocomplete-input"]') === null &&
                target.closest('.suggestions-container') === null // Use the class selector
            ) {
                setIsSuggestionBoxVisible(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []); // Empty dependency array means this runs once on mount


    const handleConsultationChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSelectedConsultationType(event.target.value);
    };

    const handleSpecialtyChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const { value, checked } = event.target;
        setSelectedSpecialties(prev =>
            checked ? [...prev, value] : prev.filter(spec => spec !== value)
        );
    };

    const handleSortChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSelectedSort(event.target.value);
    };

    // Helper to generate specialty filter test ID - NOW WITH TYPE CHECK
    const getSpecialtyTestId = (specialty: unknown): string => { // Use 'unknown' for better type safety
        if (typeof specialty !== 'string') {
            // Handle non-string case: log an error and return a fallback ID
            console.warn(`Invalid specialty type encountered: ${typeof specialty}`, specialty);
            // Using a more predictable fallback based on type or content if possible
            const fallbackSuffix = String(specialty).replace(/[^a-zA-Z0-9]/g, '-') || 'invalid';
            return `filter-specialty-invalid-${fallbackSuffix}-${Math.random().toString(36).substring(7)}`;
        }
        // If it's a string, proceed as before
        const sanitized = specialty.replace(/[^a-zA-Z0-9]/g, '-');
        return `filter-specialty-${sanitized}`;
    };

    // --- Render ---
    return (
        // Using Tailwind container for responsive max-width and centering
        <div className="container mx-auto p-4 md:p-6 lg:p-8 font-sans">
            {/* --- Header --- */}
            <header className="bg-blue-600 text-white p-4 md:p-6 rounded-lg mb-6 shadow-md text-center">
                <h1 className="text-2xl md:text-3xl font-bold mb-4">Find Your Doctor</h1>
                {/* Autocomplete Input and Suggestions */}
                <div className="relative max-w-xl mx-auto">
                    <input
                        type="text"
                        placeholder="Search for doctors by name..."
                        value={searchTerm}
                        onChange={handleSearchChange}
                        // Show suggestions on focus only if there's text and suggestions exist
                        onFocus={() => setIsSuggestionBoxVisible(suggestions.length > 0 && searchTerm.length > 0)}
                        data-testid="autocomplete-input"
                        aria-autocomplete="list"
                        aria-controls="autocomplete-suggestions"
                        className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-300 focus:border-blue-500 text-gray-900 outline-none"
                    />
                    {/* Suggestions Dropdown */}
                    {isSuggestionBoxVisible && suggestions.length > 0 && (
                        <ul
                            id="autocomplete-suggestions"
                            className="suggestions-container absolute top-full left-0 right-0 z-10 bg-white border border-gray-300 rounded-b-md shadow-lg mt-1 max-h-60 overflow-y-auto text-gray-900"
                            role="listbox"
                        >
                            {suggestions.map((doc) => (
                                <li
                                    key={doc.id}
                                    onClick={() => handleSuggestionClick(doc.name)}
                                    data-testid="suggestion-item"
                                    role="option"
                                    aria-selected="false"
                                    tabIndex={-1} // Allows focus but not tab navigation initially
                                    className="px-4 py-2 hover:bg-blue-100 cursor-pointer border-b border-gray-200 last:border-b-0"
                                >
                                    {doc.name}
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            </header>

            {/* Main Content Grid */}
            <main className="grid grid-cols-1 md:grid-cols-4 gap-6">
                {/* --- Filter Panel --- */}
                <aside className="md:col-span-1 bg-white p-4 rounded-lg shadow-md h-fit"> {/* h-fit makes it only as tall as needed */}
                    <h2 className="text-xl font-semibold mb-4 border-b pb-2 text-gray-800">Filters</h2>

                    {/* Consultation Mode Filter */}
                    <div className="mb-5">
                        <h3 data-testid="filter-header-moc" className="text-lg font-medium mb-2 text-gray-700">Consultation Mode</h3>
                        <div className="space-y-2">
                            {/* Video Consult Radio */}
                            <label className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                <input
                                    type="radio"
                                    name="consultationType"
                                    value="Video Consult"
                                    checked={selectedConsultationType === 'Video Consult'}
                                    onChange={handleConsultationChange}
                                    data-testid="filter-video-consult"
                                    className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                /> Video Consult
                            </label>
                             {/* In Clinic Radio */}
                            <label className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                <input
                                    type="radio"
                                    name="consultationType"
                                    value="In Clinic"
                                    checked={selectedConsultationType === 'In Clinic'}
                                    onChange={handleConsultationChange}
                                    data-testid="filter-in-clinic"
                                    className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                /> In Clinic
                            </label>
                             {/* All/Clear Radio */}
                             <label className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                <input
                                    type="radio"
                                    name="consultationType"
                                    value="" // Empty value clears the filter
                                    checked={selectedConsultationType === ''}
                                    onChange={handleConsultationChange}
                                    className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                /> All
                            </label>
                        </div>
                    </div>

                    {/* Specialities Filter */}
                    <div className="mb-5">
                        <h3 data-testid="filter-header-speciality" className="text-lg font-medium mb-2 text-gray-700">Speciality</h3>
                         {/* Scrollable container for specialties */}
                         <div className="space-y-2 max-h-60 overflow-y-auto border rounded-md p-2 pr-1">
                            {specialties.length > 0 ? specialties.map((spec, index) => ( // Added index for potential fallback key
                                <label key={`${spec}-${index}`} className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        value={spec} // Value should still be the string
                                        checked={selectedSpecialties.includes(spec)}
                                        onChange={handleSpecialtyChange}
                                        // Use the safe helper function for data-testid
                                        data-testid={getSpecialtyTestId(spec)}
                                        className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                    /> {spec}
                                </label>
                            )) : (
                                // Show message if loading is done and still no specialties
                                !loading && <span className="text-gray-500 text-sm italic">No specialties found.</span>
                            )}
                             {/* Show loading indicator specifically for specialties if needed */}
                             {loading && <span className="text-gray-500 text-sm italic">Loading specialties...</span>}
                        </div>
                    </div>

                    {/* Sort Filter */}
                    <div>
                        <h3 data-testid="filter-header-sort" className="text-lg font-medium mb-2 text-gray-700">Sort By</h3>
                        <div className="space-y-2">
                             {/* Default Sort Radio */}
                            <label className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                <input
                                    type="radio"
                                    name="sortBy"
                                    value="" // Empty value for default sort
                                    checked={selectedSort === ''}
                                    onChange={handleSortChange}
                                    className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                /> Default
                            </label>
                             {/* Sort by Fees Radio */}
                            <label className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                <input
                                    type="radio"
                                    name="sortBy"
                                    value="fees"
                                    checked={selectedSort === 'fees'}
                                    onChange={handleSortChange}
                                    data-testid="sort-fees"
                                    className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                /> Fees (Low to High)
                            </label>
                             {/* Sort by Experience Radio */}
                            <label className="flex items-center text-gray-600 hover:text-gray-900 cursor-pointer">
                                <input
                                    type="radio"
                                    name="sortBy"
                                    value="experience"
                                    checked={selectedSort === 'experience'}
                                    onChange={handleSortChange}
                                    data-testid="sort-experience"
                                    className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                /> Experience (High to Low)
                            </label>
                        </div>
                    </div>
                </aside>

                {/* --- Doctor List Section --- */}
                <section className="md:col-span-3 bg-white p-4 rounded-lg shadow-md">
                    <h2 className="text-xl font-semibold mb-4 text-gray-800">Available Doctors</h2>
                    {/* Loading State */}
                    {loading && <p className="text-center text-gray-500 py-6">Loading doctors...</p>}
                    {/* Error State */}
                    {error && <p className="text-center text-red-600 font-medium py-6">{error}</p>}
                    {/* Doctor List Display */}
                    {!loading && !error && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            {filteredDoctors.length > 0 ? (
                                // Map through filtered doctors to display cards
                                filteredDoctors.map((doc) => (
                                    // Use 'id' for the key
                                    <div key={doc.id} className="border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200 bg-gray-50" data-testid="doctor-card">
                                        {/* Doctor Name - Use 'name' */}
                                        <h3 data-testid="doctor-name" className="text-lg font-semibold text-blue-700 mb-1">{doc.name}</h3>
                                        {/* Doctor Specialties - Use 'specialities' array */}
                                        <p data-testid="doctor-specialty" className="text-sm text-gray-600 mb-1">
                                            {doc.specialities?.map(spec => spec.name).join(', ') || 'N/A'}
                                        </p>
                                        {/* Doctor Experience - Use 'experience' string */}
                                        <p data-testid="doctor-experience" className="text-sm text-gray-600 mb-1">
                                            {doc.experience || 'N/A'} {/* Handle potential missing experience */}
                                        </p>
                                        {/* Consultation Mode - Use boolean flags */}
                                        <p className="text-sm text-gray-600 mb-1">
                                            {doc.video_consult && doc.in_clinic ? 'Video Consult & In Clinic' :
                                             doc.video_consult ? 'Video Consult Available' :
                                             doc.in_clinic ? 'In Clinic Available' : 'N/A'}
                                        </p>
                                        {/* Consultation Fee - Use 'fees' string */}
                                        <p data-testid="doctor-fee" className="text-sm font-medium text-gray-800">
                                            Fee: {doc.fees || 'N/A'} {/* Handle potential missing fees */}
                                        </p>
                                    </div>
                                ))
                            ) : (
                                // Message when no doctors match filters
                                <p className="col-span-full text-center text-gray-500 py-6">No doctors found matching your criteria.</p>
                            )}
                        </div>
                    )}
                </section>
            </main>
        </div>
    );
}
